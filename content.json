{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://slzhouhm.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-01-17T01:06:13.724Z","updated":"2022-01-17T01:06:13.724Z","comments":false,"path":"/404.html","permalink":"https://slzhouhm.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2022-01-17T01:06:13.728Z","updated":"2022-01-17T01:06:13.728Z","comments":false,"path":"about/index.html","permalink":"https://slzhouhm.github.io/about/index.html","excerpt":"","text":"千磨万击还坚劲，任尔东西南北风 厚积才能薄发，不积跬步，无以至千里 面朝大海，春暖花开"},{"title":"书单","date":"2022-01-17T01:06:13.728Z","updated":"2022-01-17T01:06:13.728Z","comments":false,"path":"books/index.html","permalink":"https://slzhouhm.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-01-17T01:06:13.728Z","updated":"2022-01-17T01:06:13.728Z","comments":false,"path":"categories/index.html","permalink":"https://slzhouhm.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-01-17T01:06:13.728Z","updated":"2022-01-17T01:06:13.728Z","comments":true,"path":"links/index.html","permalink":"https://slzhouhm.github.io/links/index.html","excerpt":"","text":"在线工具邀请码: http://tool.lu/?refuid=le6"},{"title":"Repositories","date":"2022-01-17T01:06:13.728Z","updated":"2022-01-17T01:06:13.728Z","comments":false,"path":"repository/index.html","permalink":"https://slzhouhm.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-01-17T01:06:13.728Z","updated":"2022-01-17T01:06:13.728Z","comments":false,"path":"tags/index.html","permalink":"https://slzhouhm.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2022-01-17T01:06:13.728Z","updated":"2022-01-17T01:06:13.728Z","comments":true,"path":"2022/01/17/hello-world/","link":"","permalink":"https://slzhouhm.github.io/2022/01/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"算法题解1","slug":"算法题解/SFTI001","date":"2022-01-17T01:06:13.728Z","updated":"2022-01-17T01:06:13.728Z","comments":true,"path":"2022/01/17/算法题解/SFTI001/","link":"","permalink":"https://slzhouhm.github.io/2022/01/17/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/SFTI001/","excerpt":"","text":"算法题解 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"算法题解","slug":"算法题解","permalink":"https://slzhouhm.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"算法题解,面试","slug":"算法题解-面试","permalink":"https://slzhouhm.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3-%E9%9D%A2%E8%AF%95/"}]},{"title":"使用python快速执行linux命令---sh库","slug":"Python/sh库/使用python快速执行linux命令---sh库","date":"2022-01-13T23:51:40.000Z","updated":"2022-01-17T01:06:13.728Z","comments":true,"path":"2022/01/13/Python/sh库/使用python快速执行linux命令---sh库/","link":"","permalink":"https://slzhouhm.github.io/2022/01/13/Python/sh%E5%BA%93/%E4%BD%BF%E7%94%A8python%E5%BF%AB%E9%80%9F%E6%89%A7%E8%A1%8Clinux%E5%91%BD%E4%BB%A4---sh%E5%BA%93/","excerpt":"","text":"简介及用法 1. 安装 pip安装方式: pip install sh 下载安装包安装: https://pypi.org/project/sh/ 2. 完整的文档地址 https://pypi.org/project/sh/ sh依赖于各种Unix系统调用，仅适用于类Unix操作系统-Linux、macOS、BSD等，不支持Windows。 3. 常见的使用方法 3.1 传递参数 1234567891011121314151617181920import shsh.ls(&quot;-l&quot;, &quot;/tmp&quot;, color=&quot;never&quot;)from sh import tar# 正确的：tar(&quot;cvf&quot;, &quot;/tmp/test.tar&quot;, &quot;/root/test_dir&quot;)# 失败的：tar(&quot;cvf /tmp/test.tar /root/test_dir&quot;)# 关键字参数# sh 支持短格式 -a 和 长格式 --arg参数作为关键字参数# eg: curl http://duckduckgo.com/ -o page.html --silentcurl(&quot;http://duckduckgo.com/&quot;, o=&quot;page.html&quot;, silent=True)# 或者：curl(&quot;http://duckduckgo.com/&quot;, &quot;-o&quot;, &quot;page.html&quot;, &quot;--silent&quot;)# eg: adduser amoffat --system --shell=/bin/bash --no-create-homeadduser(&quot;amoffat&quot;, system=True, shell=&quot;/bin/bash&quot;, no_create_home=True)# oradduser(&quot;amoffat&quot;, &quot;--system&quot;, &quot;--shell&quot;, &quot;/bin/bash&quot;, &quot;--no-create-home&quot;) 3.2 退出码和异常 正常进程以退出代码 0 退出。获取方式: RunningCommand.exit_code 12345678910111213from sh import lstry: print(ls(&quot;/some/non-existant/folder&quot;))except ErrorReturnCode_2: print(&quot;folder doesn&#x27;t exist!&quot;) create_the_folder()except ErrorReturnCode: print(&quot;unknown error&quot;)# 可以设置返回码import shsh.weird_program(_ok_code=[0,3,5]) 3.2.1 信号 进程从信号终止时，就会引发信号。在这种情况下引发的异常是SignalException，它是ErrorReturnCode的子类。 12345678910111213141516171819202122import shtry: p = sh.sleep(3, _bg=True) p.kill()except sh.SignalException_SIGKILL: print(&quot;killed&quot;)# 可以使用数字或信号名称来捕获SignalException。例如，以下两个异常类是等价的：assert sh.SignalException_SIGKILL == sh.SignalException_9# 当命令指定非空_timeout并且命令超时时引发：try: sh.sleep(10, _timeout=1)except sh.TimeoutException: print(&quot;we timed out, as expected&quot;)# 当您为RunningCommand.wait(timeout=None)指定超时时也会引发：p = sh.sleep(10, _bg=True)try: p.wait(timeout=1)except sh.TimeoutException: print(&quot;we timed out waiting&quot;) p.kill() 3.4 重定向 sh 可以使用_out和_err特殊 kwargs将进程的 STDOUT 和 STDERR 重定向到许多不同类型的目标。 3.4.1 文件名 12345678# 如果使用字符串，则假定它是文件名。文件名以“wb”打开，表示截断写入和二进制模式。import shsh.ifconfig(_out=&quot;/tmp/interfaces&quot;)# 追加h = open(&quot;/tmp/output&quot;, &quot;a&quot;)sh.ls(&quot;/dir1&quot;, _out=h)sh.ls(&quot;/dir2&quot;, _out=h) 3.4.2 类文件对象 1234567# 还可以使用任何支持的对象.write(data)，例如 io.StringIO：import shfrom io import StringIObuf = StringIO()sh.ifconfig(_out=buf)print(buf.getvalue()) 3.4.3 函数回调 123456789101112131415161718# 回调函数也可以用作目标。该函数必须符合以下三个签名之一：# fn（数据）# 该函数仅从进程中获取数据块。# fn（数据，标准输入队列）# 除了前面的签名之外，该函数还接受一个 queue.Queue，它可用于以编程方式与进程通信。# fn（数据、标准输入队列、进程）# 除了前面的签名之外，该函数还接受了 weakref.weakrefOProc对象。# 结合_bg=True ， sh 可以通过将可调用函数传递给_out和/或_err来使用回调来增量处理输出。将为您的命令输出的每一行（或块）数据调用此可调用对象：from sh import taildef process_output(line): print(line)p = tail(&quot;-f&quot;, &quot;/var/log/some_log_file.log&quot;, _out=process_output, _bg=True)p.wait()# 要控制回调是接收行还是块，请使用 _out_bufsize。要“退出”你的回调，只需 return True。这告诉命令不要再调用你的回调了。# 返回True不会杀死进程，它只会阻止回调被再次调用。有关如何从回调中终止进程的信息，请参阅交互式回调。 3.5 异步执行 sh 提供了非阻塞的方式运行命令和获取输出的方法。 3.5.1 增量迭代 1234from sh import tailfor line in tail(&quot;f&quot;, &quot;/root/123.log&quot;, _iter=True): print(line) 需要一个完全非阻塞的迭代器，请使用_iter_noblock。 如果当前迭代会阻塞， errno.EWOULDBLOCK将被返回, 否则你会像往常一样收到一大块输出。 3.5.2 后台进程 可以使用_bg=True将其至于后台 123456789# blockssleep(3)print(&quot;... 3 senconds later&quot;)# doesn’t blockp = sleep(1, _bg=True)print(&quot;print immediately!&quot;)p.wait()print(&quot;... and 3 senconds later&quot;) 3.5.2.1 输出回调 结合_bg=True, sh 可以通过将可调用函数传递给_out和/或_err来使用回调来增量处理输出。 1234567from sh import taildef process_output(line): print(line)p = tail(&quot;-f&quot;, &quot;/var/123.log&quot;, _out=process_output, _bg=True)p.wait() 要控制回调是接收还是块，请使用_out_buffsize. 要退出回调，只需要return True。 返回True不会杀死进程， 它只会阻止回调被再次调用。 3.5.2.2 交互式回调 命令可以通过特定的回调签名以交互方式与底层进程通信通过 sh 启动的每个命令都有一个内部 STDIN queue.Queue ，可以从回调中使用 1234567891011121314def interact(line, stdin): if line == &quot;What... is the air-speed velocity of an unladen swallow?&quot;: stdin.put(&quot;What do you mean? An African or European swallow?&quot;) elif line == &quot;Huh? I... I don&#x27;t know that....AAAAGHHHHHH&quot;: cross_bridge() return True else: stdin.put(&quot;I don&#x27;t know....AAGGHHHHH&quot;) return Truep = sh.bridgekeeper(_out=interact, _bg=True)p.wait() 还可以通过添加第三个参数来接收进程对象，从回调中终止或终止您的进程（或发送任何信号，真的）： 1234567def process_output(line, stdin, process): print(line) if &quot;ERROR&quot; in line: process.kill() return Truep = tail(&quot;-f&quot;, &quot;/var/log/some_log_file.log&quot;, _out=process_output, _bg=True) 上面的代码将运行，打印行，some_log_file.log直到单词&quot;ERROR&quot;出现在一行中，此时尾部进程将被终止，脚本将结束。 也可以使用RunningCommand.terminate()发送 SIGTERM 或 RunningCommand.signal()发送一般信号。 也可以使用RunningCommand.terminate()发送 SIGTERM 或 RunningCommand.signal()发送一般信号。 3.5.2.3 完成回调 进程退出时调用的完成回调，通常（通过成功或错误退出代码）或通过信号。它总是被调用。 这是一个使用_done创建多进程池的示例，其中一次 sh.your_parallel_command并发执行不超过 10 个： 123456789101112131415161718import shfrom threading import Semaphorepool = Semaphore(10)def done(cmd, success, exit_code): pool.release()def do_thing(arg): pool.acquire() return sh.your_parallel_command(arg, _bg=True, _done=done)procs = []for arg in range(100): procs.append(do_thing(arg))# essentially a join[p.wait() for p in procs] 3.5 备份 123456from sh import _lsls = ls.bake(&quot;-la&quot;)print(ls) # &quot;/usr/bin/ls -la&quot;print(ls(&quot;/&quot;)) # 即 ls -la / 123456789a1 = ssh(&quot;server1.com&quot;, &quot;-p 1393&quot;, &quot;whoami&quot;)server1 = ssh.bake(&quot;server.com&quot;, p=1393)print(server1)a2 = server1.whoami()assert(a1 == a2) # True 3.6 管道 3.6.1 基本的","categories":[{"name":"python","slug":"python","permalink":"https://slzhouhm.github.io/categories/python/"},{"name":"sh","slug":"python/sh","permalink":"https://slzhouhm.github.io/categories/python/sh/"}],"tags":[{"name":"python","slug":"python","permalink":"https://slzhouhm.github.io/tags/python/"},{"name":"sh","slug":"sh","permalink":"https://slzhouhm.github.io/tags/sh/"},{"name":"linux","slug":"linux","permalink":"https://slzhouhm.github.io/tags/linux/"}]},{"title":"我的样例","slug":"文章模板","date":"2021-12-31T18:56:58.000Z","updated":"2022-01-17T01:06:13.728Z","comments":true,"path":"2021/12/31/文章模板/","link":"","permalink":"https://slzhouhm.github.io/2021/12/31/%E6%96%87%E7%AB%A0%E6%A8%A1%E6%9D%BF/","excerpt":"","text":"https://blog.plcent.com/2019/11/05/hexo-theme-pure/ https://www.dazhuanlan.com/simida/topics/1567142","categories":[{"name":"A","slug":"A","permalink":"https://slzhouhm.github.io/categories/A/"},{"name":"a","slug":"A/a","permalink":"https://slzhouhm.github.io/categories/A/a/"},{"name":"B","slug":"A/a/B","permalink":"https://slzhouhm.github.io/categories/A/a/B/"},{"name":"b","slug":"A/a/B/b","permalink":"https://slzhouhm.github.io/categories/A/a/B/b/"}],"tags":[{"name":"tag1","slug":"tag1","permalink":"https://slzhouhm.github.io/tags/tag1/"},{"name":"tag2","slug":"tag2","permalink":"https://slzhouhm.github.io/tags/tag2/"},{"name":"tag3","slug":"tag3","permalink":"https://slzhouhm.github.io/tags/tag3/"}]}],"categories":[{"name":"算法题解","slug":"算法题解","permalink":"https://slzhouhm.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"},{"name":"python","slug":"python","permalink":"https://slzhouhm.github.io/categories/python/"},{"name":"sh","slug":"python/sh","permalink":"https://slzhouhm.github.io/categories/python/sh/"},{"name":"A","slug":"A","permalink":"https://slzhouhm.github.io/categories/A/"},{"name":"a","slug":"A/a","permalink":"https://slzhouhm.github.io/categories/A/a/"},{"name":"B","slug":"A/a/B","permalink":"https://slzhouhm.github.io/categories/A/a/B/"},{"name":"b","slug":"A/a/B/b","permalink":"https://slzhouhm.github.io/categories/A/a/B/b/"}],"tags":[{"name":"算法题解,面试","slug":"算法题解-面试","permalink":"https://slzhouhm.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3-%E9%9D%A2%E8%AF%95/"},{"name":"python","slug":"python","permalink":"https://slzhouhm.github.io/tags/python/"},{"name":"sh","slug":"sh","permalink":"https://slzhouhm.github.io/tags/sh/"},{"name":"linux","slug":"linux","permalink":"https://slzhouhm.github.io/tags/linux/"},{"name":"tag1","slug":"tag1","permalink":"https://slzhouhm.github.io/tags/tag1/"},{"name":"tag2","slug":"tag2","permalink":"https://slzhouhm.github.io/tags/tag2/"},{"name":"tag3","slug":"tag3","permalink":"https://slzhouhm.github.io/tags/tag3/"}]}