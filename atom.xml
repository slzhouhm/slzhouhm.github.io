<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://slzhouhm.github.io/atom.xml" rel="self"/>
  
  <link href="https://slzhouhm.github.io/"/>
  <updated>2022-01-13T18:32:25.596Z</updated>
  <id>https://slzhouhm.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用python快速执行linux命令神奇---sh库</title>
    <link href="https://slzhouhm.github.io/2022/01/13/%E4%BD%BF%E7%94%A8python%E5%BF%AB%E9%80%9F%E6%89%A7%E8%A1%8Clinux%E5%91%BD%E4%BB%A4%E7%A5%9E%E5%A5%87-sh%E5%BA%93/"/>
    <id>https://slzhouhm.github.io/2022/01/13/%E4%BD%BF%E7%94%A8python%E5%BF%AB%E9%80%9F%E6%89%A7%E8%A1%8Clinux%E5%91%BD%E4%BB%A4%E7%A5%9E%E5%A5%87-sh%E5%BA%93/</id>
    <published>2022-01-13T23:51:40.000Z</published>
    <updated>2022-01-13T18:32:25.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><ol><li>安装</li></ol><ul><li>pip安装方式: pip install sh</li><li>下载安装包安装: <a href="https://pypi.org/project/sh/">https://pypi.org/project/sh/</a></li></ul><ol start="2"><li>完整的文档地址</li></ol><ul><li><a href="https://pypi.org/project/sh/">https://pypi.org/project/sh/</a></li></ul><ol start="3"><li>sh依赖于各种Unix系统调用，仅适用于类Unix操作系统-Linux、macOS、BSD等，不支持Windows。</li></ol><h1 id="常见的使用方法"><a class="markdownIt-Anchor" href="#常见的使用方法"></a> 常见的使用方法</h1><ol><li>传递参数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sh</span><br><span class="line">sh.ls(<span class="string">&quot;-l&quot;</span>, <span class="string">&quot;/tmp&quot;</span>, color=<span class="string">&quot;never&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sh <span class="keyword">import</span> tar</span><br><span class="line"><span class="comment"># 正确的：</span></span><br><span class="line">tar(<span class="string">&quot;cvf&quot;</span>, <span class="string">&quot;/tmp/test.tar&quot;</span>, <span class="string">&quot;/root/test_dir&quot;</span>)</span><br><span class="line"><span class="comment"># 失败的：</span></span><br><span class="line">tar(<span class="string">&quot;cvf /tmp/test.tar /root/test_dir&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字参数</span></span><br><span class="line"><span class="comment"># sh 支持短格式 -a 和 长格式 --arg参数作为关键字参数</span></span><br><span class="line"><span class="comment"># eg: curl http://duckduckgo.com/ -o page.html --silent</span></span><br><span class="line">curl(<span class="string">&quot;http://duckduckgo.com/&quot;</span>, o=<span class="string">&quot;page.html&quot;</span>, silent=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 或者：</span></span><br><span class="line">curl(<span class="string">&quot;http://duckduckgo.com/&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;page.html&quot;</span>, <span class="string">&quot;--silent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># eg: adduser amoffat --system --shell=/bin/bash --no-create-home</span></span><br><span class="line">adduser(<span class="string">&quot;amoffat&quot;</span>, system=<span class="literal">True</span>, shell=<span class="string">&quot;/bin/bash&quot;</span>, no_create_home=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">adduser(<span class="string">&quot;amoffat&quot;</span>, <span class="string">&quot;--system&quot;</span>, <span class="string">&quot;--shell&quot;</span>, <span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;--no-create-home&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>退出码和异常</li></ol><ul><li>正常进程以退出代码 0 退出。获取方式: RunningCommand.exit_code</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sh <span class="keyword">import</span> ls</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(ls(<span class="string">&quot;/some/non-existant/folder&quot;</span>))</span><br><span class="line"><span class="keyword">except</span> ErrorReturnCode_2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;folder doesn&#x27;t exist!&quot;</span>)</span><br><span class="line">    create_the_folder()</span><br><span class="line"><span class="keyword">except</span> ErrorReturnCode:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;unknown error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以设置返回码</span></span><br><span class="line"><span class="keyword">import</span> sh</span><br><span class="line">sh.weird_program(_ok_code=[<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><ol start="3"><li>信号</li></ol><ul><li>进程从信号终止时，就会引发信号。在这种情况下引发的异常是SignalException，它是ErrorReturnCode的子类。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sh</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p = sh.sleep(<span class="number">3</span>, _bg=<span class="literal">True</span>)</span><br><span class="line">    p.kill()</span><br><span class="line"><span class="keyword">except</span> sh.SignalException_SIGKILL:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;killed&quot;</span>)</span><br><span class="line"><span class="comment"># 可以使用数字或信号名称来捕获SignalException。例如，以下两个异常类是等价的：</span></span><br><span class="line"><span class="keyword">assert</span> sh.SignalException_SIGKILL == sh.SignalException_9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当命令指定非空_timeout并且命令超时时引发：</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    sh.sleep(<span class="number">10</span>, _timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> sh.TimeoutException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;we timed out, as expected&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当您为RunningCommand.wait(timeout=None)指定超时时也会引发：</span></span><br><span class="line">p = sh.sleep(<span class="number">10</span>, _bg=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p.wait(timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> sh.TimeoutException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;we timed out waiting&quot;</span>)</span><br><span class="line">    p.kill()</span><br></pre></td></tr></table></figure><ol start="4"><li>重定向</li></ol><ul><li>sh 可以使用_out和_err特殊 kwargs将进程的 STDOUT 和 STDERR 重定向到许多不同类型的目标。<br />4.1  文件名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果使用字符串，则假定它是文件名。文件名以“wb”打开，表示截断写入和二进制模式。</span></span><br><span class="line"><span class="keyword">import</span> sh</span><br><span class="line">sh.ifconfig(_out=<span class="string">&quot;/tmp/interfaces&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加</span></span><br><span class="line">h = <span class="built_in">open</span>(<span class="string">&quot;/tmp/output&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">sh.ls(<span class="string">&quot;/dir1&quot;</span>, _out=h)</span><br><span class="line">sh.ls(<span class="string">&quot;/dir2&quot;</span>, _out=h)</span><br></pre></td></tr></table></figure><p>4.2 类文件对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还可以使用任何支持的对象.write(data)，例如 io.StringIO：</span></span><br><span class="line"><span class="keyword">import</span> sh</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line">buf = StringIO()</span><br><span class="line">sh.ifconfig(_out=buf)</span><br><span class="line"><span class="built_in">print</span>(buf.getvalue())</span><br></pre></td></tr></table></figure><p>4.3 函数回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回调函数也可以用作目标。该函数必须符合以下三个签名之一：</span></span><br><span class="line"><span class="comment"># fn（数据）</span></span><br><span class="line"><span class="comment"># 该函数仅从进程中获取数据块。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fn（数据，标准输入队列）</span></span><br><span class="line"><span class="comment"># 除了前面的签名之外，该函数还接受一个 queue.Queue，它可用于以编程方式与进程通信。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fn（数据、标准输入队列、进程）</span></span><br><span class="line"><span class="comment"># 除了前面的签名之外，该函数还接受了 weakref.weakrefOProc对象。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合_bg=True ， sh 可以通过将可调用函数传递给_out和/或_err来使用回调来增量处理输出。将为您的命令输出的每一行（或块）数据调用此可调用对象：</span></span><br><span class="line"><span class="keyword">from</span> sh <span class="keyword">import</span> tail</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_output</span>(<span class="params">line</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">p = tail(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;/var/log/some_log_file.log&quot;</span>, _out=process_output, _bg=<span class="literal">True</span>)</span><br><span class="line">p.wait()</span><br><span class="line"><span class="comment"># 要控制回调是接收行还是块，请使用 _out_bufsize。要“退出”你的回调，只需 return True。这告诉命令不要再调用你的回调了。</span></span><br><span class="line"><span class="comment"># 返回True不会杀死进程，它只会阻止回调被再次调用。有关如何从回调中终止进程的信息，请参阅交互式回调。</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://amoffat.github.io/sh/tutorials/interacting_with_processes.html#tutorial2">https://amoffat.github.io/sh/tutorials/interacting_with_processes.html#tutorial2</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;pip安装方式: pip install sh&lt;/li&gt;
&lt;li&gt;下载安装包安装: &lt;</summary>
      
    
    
    
    <category term="python" scheme="https://slzhouhm.github.io/categories/python/"/>
    
    
    <category term="python;sh;linux" scheme="https://slzhouhm.github.io/tags/python-sh-linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://slzhouhm.github.io/2022/01/13/hello-world/"/>
    <id>https://slzhouhm.github.io/2022/01/13/hello-world/</id>
    <published>2022-01-13T18:32:25.596Z</published>
    <updated>2022-01-13T18:32:25.596Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客练习</title>
    <link href="https://slzhouhm.github.io/2022/01/13/%E7%BB%83%E4%B9%A0/"/>
    <id>https://slzhouhm.github.io/2022/01/13/%E7%BB%83%E4%B9%A0/</id>
    <published>2022-01-13T18:32:25.596Z</published>
    <updated>2022-01-13T18:32:25.596Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="test" scheme="https://slzhouhm.github.io/categories/test/"/>
    
    
    <category term="l1" scheme="https://slzhouhm.github.io/tags/l1/"/>
    
  </entry>
  
  <entry>
    <title>算法题解1</title>
    <link href="https://slzhouhm.github.io/2022/01/13/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/SFTI001/"/>
    <id>https://slzhouhm.github.io/2022/01/13/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/SFTI001/</id>
    <published>2022-01-13T18:32:25.596Z</published>
    <updated>2022-01-13T18:32:25.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法题解"><a class="markdownIt-Anchor" href="#算法题解"></a> 算法题解</h1><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#算法题解&quot;&gt;&lt;/a&gt; 算法题解&lt;/h1&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very </summary>
      
    
    
    
    <category term="算法题解" scheme="https://slzhouhm.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法题解,面试" scheme="https://slzhouhm.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3-%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>新增加</title>
    <link href="https://slzhouhm.github.io/2022/01/07/%E6%96%B0%E5%A2%9E%E5%8A%A0/"/>
    <id>https://slzhouhm.github.io/2022/01/07/%E6%96%B0%E5%A2%9E%E5%8A%A0/</id>
    <published>2022-01-07T09:14:19.000Z</published>
    <updated>2022-01-13T18:32:25.596Z</updated>
    
    <content type="html"><![CDATA[<p>理解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;理解&lt;/p&gt;
</summary>
      
    
    
    
    <category term="新增FL" scheme="https://slzhouhm.github.io/categories/%E6%96%B0%E5%A2%9EFL/"/>
    
    
    <category term="新增BQ" scheme="https://slzhouhm.github.io/tags/%E6%96%B0%E5%A2%9EBQ/"/>
    
  </entry>
  
</feed>
